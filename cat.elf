%% Universe

ens	: type. %name ens X.
in	: ens -> type. %name in A.
incl	: in U -> ens.

==	: in X -> in X -> type. %name == Eq.
%infix none 5 ==.

refl	: X == Y.
symm	: X == Y -> Y == X.
trans	: X == Y -> Y == Z -> X == Z.

%% Type of diagram

diag	: type. %name diag D.

ob	: diag -> ens.
obj	= [D] in (ob D).

hom	: obj D -> obj D -> ens.
mor	= [X] [Y] in (hom X Y).

%% Category

cat		: type. %name cat C.
cat_incl	: cat -> diag.

cat_hom		: obj (cat_incl C) -> obj (cat_incl C) -> ens
		= hom.
cat_mor		= [X] [Y] in (cat_hom X Y).

@		: cat_mor Y Z -> cat_mor X Y -> cat_mor X Z.
%infix left 10 @.

assoc		: H @ (G @ F) == (H @ G) @ F.

id		: cat_mor X X.

id_l		: id @ F == F.
id_r		: F @ id == F.

=@=		: F == F' -> G == G' -> F @ G == F' @ G'.

%% Morphism of type of diagram

morph		: diag -> diag -> type. %name morph M.

morph_ob	: morph D D' -> obj D -> obj D'.
morph_hom	: {m} mor X Y -> mor (morph_ob m X) (morph_ob m Y).

%% Functor

functor		: cat -> cat -> type. %name functor F.
functor_incl	: functor C C' -> morph (cat_incl C) (cat_incl C').

functor_ob	= [F] morph_ob (functor_incl F).
functor_hom	: {f} cat_mor X Y -> cat_mor (functor_ob f X) (functor_ob f Y)
		= [F] morph_hom (functor_incl F).

distr		: functor_hom P G @ functor_hom P F == functor_hom P (G @ F).

%% Natural transformation

natural		: functor C C' -> functor C C' -> type.

natural_compon	: natural F G -> cat_mor (functor_ob F X) (functor_ob G X).

commut		: natural_compon N @ functor_hom P F
		  == functor_hom P G @ natural_compon N.
