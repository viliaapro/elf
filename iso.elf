%% Diagonal

%abbrev par	= [C : corr] [X] [Y] C X Y X Y.
%abbrev diag	= [C] par C X Y.

%% Identity and inverse

id		: corr -> in U -> type. %name id Id.

id_intr		: ({f} in (diag C (f ; I) f))
		   -> ({f} in (diag C f (I ; f)))
		   -> id C I.
id_elim_0	: id C I -> in (diag C (F ; I) F).
id_elim_1	: id C I -> in (diag C F (I ; F)).

inv		: corr -> in U -> in V -> type. %name inv Inv.

inv_intr	: id C (F ; G) -> inv C F G.
inv_elim	: inv C F G -> id C (F ; G).

%% Uniqueness

un		: bin -> ens -> type. %name un Un.

un_intr		: ({x : in U} {y : in U} in (R x y)) -> un R U.
un_elim		: un R U -> {x : in U} {y : in U} in (R x y).

%% Lemmata

corr_re		: corr -> type. %name corr_re CRe.

corr_re_intr	: ({x} {y} re (par C x y)) -> corr_re C.
corr_re_elim	: corr_re C -> re (par C X Y).

center		: as C
		   -> corr_re C
		   -> in (diag C ((F ; G) ; H) (F ; (G ; H)))
		=  
		   [As] [Re]
		   ([Fun : {x} {y} {f} in (par C x y f f)]
		      assoc_elim As (Fun X Y F) (Fun Y Z G) (Fun Z W H))
		   ([X] [Y] [F]
		      (refl_elim (corr_re_elim Re))).

left		: {g} inv C G' F -> in (diag C g _)
   		= [G] [Inv']
		   id_elim_1 (inv_elim Inv').

right		: {g'} inv C F G -> in (diag C _ g')
   		= [G'] [Inv]
		   id_elim_0 (inv_elim Inv).

iso_eq		: as C
		   -> tr (diag C)
		   -> corr_re C
		   -> (inv C F G)
		   -> (inv C G' F)
		   -> in (diag C G G')
		=
		   [As] [Tr] [Re] [Inv] [Inv']
		   seq_elim Tr
		   (seq_intr Tr (left G Inv')
		      ; seq_intr Tr (center As Re)
		      ; seq_intr Tr (right G' Inv)).
