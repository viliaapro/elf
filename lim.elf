%% Cone and cocone

cone		: {m} cat_mor V (morph_ob m I) -> type.
cone_elim	: cone M Pr -> morph_hom M F @ Pr == Pr.

cocone		: {m} cat_mor (morph_ob m I) V -> type.
cocone_elim	: cocone M In -> In == In @ morph_hom M F.

%% Factorization

%abbrev dom = [_ : mor X _] X.
%abbrev cod = [_ : mor _ X] X.

fact		: cat_mor V X -> cat_mor V' X -> ens.
fact_incl	: in (fact Pr Pr') -> mor (dom Pr) (dom Pr').

fact_elim	: {f : in (fact Pr Pr')} Pr @ fact_incl f == Pr'.

cofact		: cat_mor X V -> cat_mor X V' -> ens.
cofact_incl	: in (cofact In In') -> mor (cod In') (cod In).

cofact_elim	: {f : in (cofact In In')} In == cofact_incl f @ In'.

%% Unique

un		: ens -> type.
un_incl		: un U -> in U.

un_l	 	: un_incl X == Y.
un_r		= symm un_l.

%% Limit and colimit

limit		: {m} cat_mor V (morph_ob m I) -> type.
limit_incl	: limit M Pr -> cone M Pr.

limit_elim	: limit M Pr -> cone M Pr' -> un (fact Pr Pr').

colimit		: {m} cat_mor (morph_ob m I) V -> type.
colimit_incl	: colimit M In -> cocone M In.

colimit_elim	: colimit M In -> cocone M In' -> un (cofact In In').
