%% Cone and cocone

cone		: cat_mor V (morph_ob M I) -> type.
cone_elim	: cone Pr -> morph_hom F @ Pr == Pr.

cocone		: cat_mor (morph_ob M I) V -> type.
cocone_elim	: cocone In -> In == In @ morph_hom F.

%% Factorization

%abbrev dom = [_ : mor X _] X.
%abbrev cod = [_ : mor _ X] X.

fact		: cat_mor V X -> cat_mor V' X -> ens.
fact_incl	: in (fact Pr Pr') -> mor (dom Pr) (dom Pr').

fact_elim	: Pr @ fact_incl F == Pr'.

cofact		: cat_mor X V -> cat_mor X V' -> ens.
cofact_incl	: in (cofact In In') -> mor (cod In) (cod In').

cofact_elim	: In == cofact_incl F @ In'.

%% Unique

un		: ens -> type.
un_incl		: un U -> in U.

un_l	 	: un_incl X == Y.
un_r		= symm un_l.

%% Limit and colimit

limit		: cat_mor V (morph_ob M I) -> type.
limit_incl	: limit Pr -> cone Pr.

limit_elim	: limit Pr -> cone Pr' -> un (fact Pr Pr').

colimit		: cat_mor (morph_ob M I) V -> type.
colimit_incl	: colimit In -> cocone In.

colimit_elim	: colimit In -> cocone In' -> un (cofact In In').
